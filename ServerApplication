/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package com.tcpserver;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Serializable;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 *
 * @author marshmallow
 */

class IncorrectActionException extends Exception {
    public IncorrectActionException(String message) {
        super(message);
    }
}

class ActionClassNotFoundException extends Exception {
    public ActionClassNotFoundException(String message) {
        super(message);
    }
}
//}
// better def in notes making a class Serializable in Java enables its objects to be converted into a byte stream, 
//facilitating features like object persistence, network communication, and more.
// Define a ClassInfo class for storing class details
class ClassInfo implements Serializable {
    private static final long serialVersionUID = 1L;

    private String date;
    private String time;
    private String room;
    private String length;

    public ClassInfo(String date, String time, String room, String length) {
        this.date = date;
        this.time = time;
        this.room = room;
        this.length = length;
    }

    public String getDate() {
        return date;
    }

    public String getTime() {
        return time;
    }

    public String getRoom() {
        return room;
    }
      public String getlength() {
        return length;
    }
}


public class TCPServer {

  private static ServerSocket servSock;
  private static final int PORT = 1234;
  private static int clientConnections = 0;
  private static HashMap<String, List<ClassInfo>> scheduleData;

public TCPServer() {
        scheduleData = new HashMap<>();
    }

  public static void main(String[] args) {
      TCPServer instance = new TCPServer();
    System.out.println("Opening port...\n");
    try 
    {
        servSock = new ServerSocket(PORT);      //Step 1.
    }
    catch(IOException e) 
    {
         System.out.println("Unable to attach to port!");
         System.exit(1);
    }
    
    do 
    {
         instance.run();
    }while (true);

  }
  
  private static void run()
  {
    Socket link = null;                        //Step 2.
    try 
    {
      link = servSock.accept();               //Step 2.
      clientConnections++;
      BufferedReader in = new BufferedReader( new InputStreamReader(link.getInputStream())); //Step 3.
      PrintWriter out = new PrintWriter(link.getOutputStream(),true); //Step 3.
      
          String clientMessage;
                while ((clientMessage = in.readLine()) != null) {
                    System.out.println("Message received from client: " + clientConnections + "  " + clientMessage);

                    // Process client message
                    String ServerResponse = processClientMessage(clientMessage);

                    // Send response to the client
                    out.print (ServerResponse);

                    // Check for termination condition
                    if (ServerResponse.equals("TERMINATE")) {
                        break;
                    }
                } //Step 4.
     }
    catch(IOException e)
    {
        e.printStackTrace();
    }
    finally 
    {
       try {
	    System.out.println("\n* Closing connection... *");
            link.close();				    //Step 5.
	}
       catch(IOException e)
       {
            System.out.println("Unable to disconnect!");
	    System.exit(1);
       }
    }
  }
  
   private String performAction(String action) throws IncorrectActionException, ActionClassNotFoundException {
        String[] actionParts = action.split(",");
        try {
            switch (actionParts[0]) {
                case "ADD_CLASS":
                    if (actionParts.length == 6) {
                        String date = actionParts[4].trim();
                        String time = actionParts[2].trim();
                        String room = actionParts[5].trim();
                        String className = actionParts[1].trim();
                        String length = actionParts[3].trim();

                        if (!scheduleData.containsKey(className)) {
                            scheduleData.put(className, new ArrayList<>());
                        }

                        List<ClassInfo> classes = scheduleData.get(className);

                        if (!hasClash(classes, date, time, room)) {
                            // No clash, add the class
                            classes.add(new ClassInfo(date, time, room, length));
                            return "Class added successfully.";
                        } else {
                            throw new IncorrectActionException("Class scheduling clash.");
                        }
                    } else {
                        throw new IncorrectActionException("Invalid ADD_CLASS format.");
                    }

                case "REMOVE_CLASS":
                    if (actionParts.length == 2) {
                        String classNameToRemove = actionParts[1].trim();

                        if (scheduleData.containsKey(classNameToRemove)) {
                            List<ClassInfo> classes = scheduleData.get(classNameToRemove);

                            // Assuming the client provides an index to remove (0-based index)
                            if (!classes.isEmpty()) {
                                // Get the removed class information
                                ClassInfo removedClass = classes.remove(0);

                                // Implement logic to free the time slot and reply with the freed time slot
                                String freedTimeSlot = "Freed time slot: " + removedClass.getDate() + " " +
                                        removedClass.getTime() + " in room " + removedClass.getRoom();

                                return freedTimeSlot;
                            } else {
                                throw new IncorrectActionException("No classes to remove for " + classNameToRemove);
                            }
                        } else {
                            throw new IncorrectActionException("Class not found: " + classNameToRemove);
                        }

                    } else {
                        throw new IncorrectActionException("Invalid REMOVE_CLASS format.");
                    }

                case "DISPLAY_SCHEDULE":
                    if (actionParts.length == 2) {
                        String classNameToDisplay = actionParts[1].trim();

                        if (scheduleData.containsKey(classNameToDisplay)) {
                            // Display the schedule for the specified class in the console
                            List<ClassInfo> classes = scheduleData.get(classNameToDisplay);
                            for (ClassInfo classInfo : classes) {
                                System.out.println("Class: " + classNameToDisplay + ", Date: " +
                                        classInfo.getDate() + ", Time: " + classInfo.getTime() +
                                        ", Room: " + classInfo.getRoom());
                            }

                            // Return a message indicating successful display
                            return "Schedule displayed successfully.";
                        } else {
                            throw new IncorrectActionException("Class not found: " + classNameToDisplay);
                        }

                    } else {
                        throw new IncorrectActionException("Invalid DISPLAY_SCHEDULE format.");
                    }

                default:
                    throw new IncorrectActionException("Invalid action.");
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new IncorrectActionException("Invalid action format.");
        }
    }
 /**
     * Enum representing the action cases.
     */
    private enum ActionCase {
        ADD_CLASS,
        REMOVE_CLASS,
        DISPLAY_SCHEDULE,
        STOP
    }

    /**
     * Converts the action string to the corresponding ActionCase enum.
     *
     * @param action The action string
     * @return The corresponding ActionCase enum
     * @throws IncorrectActionException If the action string is invalid
     */
    private ActionCase getActionCase(String action) throws IncorrectActionException {
        switch (action.toUpperCase()) {
            case "ADD_CLASS":
                return ActionCase.ADD_CLASS;
            case "REMOVE_CLASS":
                return ActionCase.REMOVE_CLASS;
            case "DISPLAY_SCHEDULE":
                return ActionCase.DISPLAY_SCHEDULE;
            case "STOP":
                return ActionCase.STOP;
            default:
                throw new IncorrectActionException("Invalid action.");
        }
    }
    private boolean hasClash(List<ClassInfo> classes, String date, String time, String room) {
        // Implementation of logic to check for scheduling clash
        // assume there is a clash if the class has the same date, time, and room
        for (ClassInfo classInfo : classes) {
            if (classInfo.getDate().equals(date) && classInfo.getTime().equals(time) && classInfo.getRoom().equals(room)) {
                return true; // Clash found
            }
        }
        return false; // No clash
    }
}

