
package com.server1;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * The TCPServer class represents a simple TCP server that manages a schedule of classes.
 * It listens for client connections, receives messages from clients, processes them, and sends responses.
 * The server uses a static ServerSocket to accept connections and manages a scheduleData HashMap
 * to store class information.
 * @author marshmallow
 */

class IncorrectActionException extends Exception {
    public IncorrectActionException(String message) {
        super(message);
    }
}

class ActionClassNotFoundException extends Exception {
    public ActionClassNotFoundException(String message) {
        super(message);
    }
}

/**
 * ClassInfo class for storing class details
 */
record ClassInfo(String day, String time, String room, String className) {
    /**
     * Constructor for ClassInfo.
     *
     * @param day  The day of the class
     * @param time The time of the class
     * @param room The room of the class
     */
    ClassInfo {
    }

    /**
     * Getter for the day of the class.
     *
     * @return The day of the class
     */

    public String getDay() {
        return day;
    }
    @Override
    public String day() {
        return day;
    }


    /**
     * Getter for the time of the class.
     *
     * @return The time of the class
     */

    public String getTime() {
        return time;
    }

    /**
     * Getter for the room of the class.
     *
     * @return The room of the class
     */
    @Override
    public String room() {
        return room;
    }
    /**
     * Getter for the name of the class.
     *
     * @return The name of the class
     */
    public String getClassName() {
        return className;
    }

    public void setTime(String time) {
    }
}

/**
 * The Server1 class represents the main server application that handles client connections.
 * It uses a static ServerSocket to listen for connections, processes client messages, and sends responses.
 */
public class Server1 {
    private static final Logger LOGGER = Logger.getLogger(Server1.class.getName());

    private static ServerSocket servSock;
    private int clientConnections = 0;
    private final ConcurrentHashMap<String, List<ClassInfo>> scheduleData = new ConcurrentHashMap<>();
    private final ExecutorService executorService = Executors.newCachedThreadPool();

    private void startServer(int port) {
        try {
            servSock = new ServerSocket(port);
            LOGGER.info("Server started on port: " + port);
            while (true) {
                Socket socket = servSock.accept();
                LOGGER.info("Client connected: " + socket.getInetAddress());
                Runnable clientHandler = new ClientHandler(socket);
                executorService.execute(clientHandler);
            }
        } catch (IOException e) {
            LOGGER.severe("Error starting server: " + e.getMessage());
        }
    }

    private class ClientHandler implements Runnable {
        private final Socket socket;
        private BufferedReader in;
        private PrintWriter out;

        public ClientHandler(Socket socket) {
            this.socket = socket;
            clientConnections++;
        }

        @Override
        public void run() {
            try {
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);

                String clientMessage;
                while ((clientMessage = in.readLine()) != null) {
                    LOGGER.info("Message received from client: " + clientConnections + " - " + clientMessage);
                    processClientMessage(clientMessage);
                }
            } catch (IOException e) {
                LOGGER.severe("IO Exception: " + e.getMessage());
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    LOGGER.severe("Error closing socket: " + e.getMessage());
                }
            }
        }

        private String loadCSVFile(String fileName) {
            StringBuilder content = new StringBuilder();
            try (InputStream inputStream = getClass().getResourceAsStream("/" + fileName)) {
                if (inputStream != null) {
                    LOGGER.info("CSV file found: " + fileName); // Log statement added
                    try (Scanner scanner = new Scanner(new InputStreamReader(inputStream))) {
                        while (scanner.hasNextLine()) {
                            String line = scanner.nextLine();
                            content.append(line.replace(",", ""));
                        }
                    }
                } else {
                    throw new FileNotFoundException("File not found: " + fileName);
                }
            } catch (IOException e) {
                LOGGER.warning("Error loading CSV file: " + e.getMessage()); // Log error
                LOGGER.log(Level.SEVERE, "Exception occurred", e); // Log the exception with severe level
                // Handle the exception appropriately (e.g., log an error, terminate the program)
            }


            return content.toString();
        }


        /**
         * Processes the client's message and returns the server's response.
         *
         * @param clientMessage The message received from the client
         * @return The server's response to the client
         */
        public String processClientMessage(String clientMessage) {
            String[] messageParts = clientMessage.split(",");
            String action = messageParts[0].trim();

            try {
                switch (action) {
                    case "ADD_CLASS":
                        out.print("add class request received");
                        if (messageParts.length == 7) {
                            String className = messageParts[1].trim();
                            String time = messageParts[2].trim();
                            String length = messageParts[3].trim();
                            String Day = messageParts[4].trim();
                            String room = messageParts[5].trim();
                            String course = messageParts[6].trim();

                            // Validate day, time, and room
                            validateDay(Day);
                            validateTime(time);
                            validateRoom(room);
                            validateCourseCode(course);
                            validateClassLength(length);

                            if (!scheduleData.containsKey(className)) {
                                scheduleData.put(className, new ArrayList<>());
                            }

                            List<ClassInfo> classes = scheduleData.get(className);

                            if (!hasClash(classes, Day, time, room)) {
                                classes.add(new ClassInfo(Day, time, room, className));
                                out.println("Schedule Data after adding class: " + scheduleData);  // debug
                                return "Class added successfully.";

                            } else {
                                throw new IncorrectActionException("Class scheduling clash.");
                            }
                        } else {
                            throw new IncorrectActionException("Invalid ADD_CLASS format.");
                        }

                    case "REMOVE_CLASS":
                        out.print("remove class received");
                        if (messageParts.length == 2) {
                            String classNameToRemove = messageParts[1].trim();

                            if (scheduleData.containsKey(classNameToRemove)) {
                                out.println("Schedule Data before removing class: " + scheduleData);

                                List<ClassInfo> classes = scheduleData.get(classNameToRemove);

                                if (!classes.isEmpty()) {
                                    ClassInfo removedClass = classes.remove(0);

                                    return "Freed time slot: " + removedClass.day() + " " +
                                            removedClass.time() + " in room " + removedClass.room();
                                } else {
                                    throw new IncorrectActionException("No classes to remove for " + classNameToRemove);
                                }
                            } else {
                                throw new IncorrectActionException("Class not found: " + classNameToRemove);
                            }

                        } else {
                            throw new IncorrectActionException("Invalid REMOVE_CLASS format.");
                        }

                    case "DISPLAY_SCHEDULE":

                        if (messageParts.length == 3) {
                            String classNameToDisplay = messageParts[1].trim();
                            String courseNameToDisplay = messageParts[2].trim();

                            out.println("Class name: " + classNameToDisplay);
                            out.println("Course name: " + courseNameToDisplay);
                            validateCourseCode(courseNameToDisplay);  // Validate course code

                            if (scheduleData.containsKey(classNameToDisplay)) {
                                List<ClassInfo> classes = scheduleData.get(classNameToDisplay);
                                List<String> scheduleList = new ArrayList<>();
                                for (ClassInfo classInfo : classes) {
                                    scheduleList.add(String.format("%s,%s,%s,%s",
                                            classNameToDisplay, classInfo.day(), classInfo.time(), classInfo.room()));
                                }

                                // Return comma separated list using join
                                return String.join(",", scheduleList);
                            } else {
                                throw new IncorrectActionException("Class not found: " + classNameToDisplay);
                            }

                        } else {
                            throw new IncorrectActionException("Invalid DISPLAY_SCHEDULE format.");
                        }
                    case "EARLY_LECTURES":
                        if (messageParts.length == 2) {
                            String day = messageParts[1].trim();
                            shiftEarlyLectures(day);
                        } else {
                            out.println("Invalid EARLY_LECTURES format.");
                        }

                    case "STOP":
                        return "TERMINATE";

                    default:
                        throw new ActionClassNotFoundException("Action not recognised: " + action);
                }
            } catch (IncorrectActionException | ActionClassNotFoundException e) {
                return e.getMessage();
            }
        }

        private void shiftEarlyLectures(String day) {
            if (!isValidDay(day)) {
                out.println("Invalid day: " + day);
                return;
            }

            List<ClassInfo> classes = scheduleData.get(day);
            if (classes == null || classes.isEmpty()) {
                out.println("No classes scheduled for " + day);
                return;
            }

            // Shift classes to early morning if slots are available
            for (ClassInfo classInfo : classes) {
                if (canShiftToEarlyMorning(classInfo)) {
                    // Shift the class to early morning
                    // For example, you can set the time to 9:00 AM
                    classInfo.setTime("09:00");
                    // Notify the client about the change
                    out.println("Class '" + classInfo.getClassName() + "' shifted to early morning.");
                } else {
                    out.println("Cannot shift class '" + classInfo.getClassName() + "' to early morning. Time slot occupied.");
                }
            }
        }
        private boolean canShiftToEarlyMorning(ClassInfo classInfo) {
            String day = classInfo.getDay();
            String time = "09:00"; // Early morning time

            // Retrieve classes scheduled for the specified day
            List<ClassInfo> classes = scheduleData.get(day);
            if (classes == null) {
                // No classes scheduled for this day, so early morning slot is available
                return true;
            }

            // Check if there's no other class scheduled at 9:00 AM on the specified day
            for (ClassInfo otherClass : classes) {
                if (otherClass.getTime().equals(time)) {
                    // Another class is already scheduled at 9:00 AM
                    return false;
                }
            }

            // No other class scheduled at 9:00 AM, so early morning slot is available
            return true;
        }
        

        /**
         * Checks for scheduling clashes in the given list of classes
         *
         * @param classes List of classes to check for clashes
         * @param Day     Day of the class
         * @param time    Time of the class
         * @param room    Room of the class
         * @return True if there is a clash, false otherwise
         * @throws IncorrectActionException If there is an incorrect action
         */
        private boolean hasClash(List<ClassInfo> classes, String Day, String time, String room) throws IncorrectActionException {
            validateRoom(room); // Validate room first

            // Check for scheduling clash
            for (ClassInfo classInfo : classes) {
                if (classInfo.day().equals(Day) && classInfo.time().equals(time) && classInfo.room().equals(room)) {
                    return true; // Clash found
                }
            }

            return false; // No clash
        }


        // Validate if course code is a valid code from the list of 150 course codes
        private boolean isValidCourseCode(String courseCode) {
            String courseCodesContent = loadCSVFile("course-codes.csv");
            return courseCodesContent.contains(courseCode);
        }

        /**
         * Validate if course code is a valid code from the list of 150 course codes.
         *
         * @param courseCode The course code to validate
         * @throws IncorrectActionException If the course code is invalid
         */
        private void validateCourseCode(String courseCode) throws IncorrectActionException {
            if (!isValidCourseCode(courseCode)) {
                throw new IncorrectActionException("Invalid course code. Please choose a valid course code.");
            }
        }

        // Validate if room is a valid room code from the list of 200 rooms
        private boolean isValidRoom(String room) {
            String roomCodesContent = loadCSVFile("room-code.csv");
            return roomCodesContent.contains(room);
        }

        /**
         * Validate if room is a valid room code from the list of 200 rooms.
         *
         * @param room The room code to validate
         * @throws IncorrectActionException If the room code is invalid
         */
        private void validateRoom(String room) throws IncorrectActionException {
            if (!isValidRoom(room)) {
                throw new IncorrectActionException("Invalid room code. Please choose a valid room code.");
            }
        }

        /**
         * Checks if the given day is valid (Monday to Friday).
         */
        private void validateDay(String Day) {
            String[] validDays = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};
            for (String validDay : validDays) {
                if (validDay.equalsIgnoreCase(Day)) {
                    return;
                }
            }
        }
        private boolean isValidDay(String day) {
            String[] validDays = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};
            for (String validDay : validDays) {
                if (validDay.equalsIgnoreCase(day)) {
                    return true;
                }
            }
            return false;
        }

        /**
         * Validate the length of the class.
         *
         * @param classLength The class length to validate
         * @throws IncorrectActionException If the class length is invalid
         */

        private void validateClassLength(String classLength) throws IncorrectActionException {
            try {
                int classLengthValue = Integer.parseInt(classLength);

                // Validate that the class length is within the desired range (30 to 180)
                if (classLengthValue < 30 || classLengthValue > 180) {
                    throw new IncorrectActionException("Class length must be between 30 and 180 minutes.");
                }

                // Validate that the class length is in intervals of 30
                if (classLengthValue % 30 != 0) {
                    throw new IncorrectActionException("Class length must be in intervals of 30 minutes.");
                }
            } catch (NumberFormatException e) {
                throw new IncorrectActionException("Invalid class length format. Please provide a valid integer.");
            }
        }

        /**
         * Checks if the given time is valid (between 8 am and 8 pm).
         *
         * @param time The time to validate
         * @throws IncorrectActionException If the time is invalid
         */
        private void validateTime(String time) throws IncorrectActionException {
            try {
                int hour = Integer.parseInt(time.split(":")[0]);
                int minute = Integer.parseInt(time.split(":")[1].split(" ")[0]);

                // Check if the time is between 8 am and 8 pm
                if (!(hour >= 8 && hour < 20 && minute >= 0 && minute <= 59)) {
                    throw new IncorrectActionException("Invalid time. Please choose a time between 8 am and 8 pm.");
                }
            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
                throw new IncorrectActionException("Invalid time format. Please use HH:mm (24-hour format).");
            }
        }
    }
}
